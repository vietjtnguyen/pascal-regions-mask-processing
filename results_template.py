#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1403695236.522981
__CHEETAH_genTimestamp__ = 'Wed Jun 25 04:20:36 2014'
__CHEETAH_src__ = 'results_template.tmpl'
__CHEETAH_srcLastModified__ = 'Wed Jun 25 04:20:33 2014'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class results_template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(results_template, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        write(u'''<html>
<head>
  <title>Images for ''')
        _v = VFFSL(SL,"query_label",True) # u'${query_label}' on line 3, col 21
        if _v is not None: write(_filter(_v, rawExpr=u'${query_label}')) # from line 3, col 21.
        write(u'''</title>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css">
  <script src="//code.jquery.com/jquery-1.10.2.js"></script>
  <script src="//code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
  <script>
  $(function() {
    var availableTags = [
''')
        self._handleCheetahInclude("classes.txt", trans=trans, includeFrom="file", raw=True)
        write(u'''    ];
    $( ".tags" ).autocomplete({
      source: availableTags
    });
''')
        for index, (image_name, region_filename, label_folder, change_value) in enumerate(VFFSL(SL,"regions_metadata",True)): # generated from line 15, col 5
            write(u'''    $( "#tags_''')
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 16, col 17
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 16, col 17.
            write(u'''" ).keypress( function(e) {
      if (e.which == 13) {
        $.ajax({
          url: \'http://192.168.1.104:8888/change/''')
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 19, col 50
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 19, col 50.
            write(u'''/''')
            _v = VFFSL(SL,"query_label",True) # u'${query_label}' on line 19, col 64
            if _v is not None: write(_filter(_v, rawExpr=u'${query_label}')) # from line 19, col 64.
            write(u"""/to/'+this.value,
          success: function() {
            $('#submit_""")
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 21, col 25
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 21, col 25.
            write(u"""').text('Submitted');
            setTimeout( function() {
              $('#submit_""")
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 23, col 27
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 23, col 27.
            write(u"""').text('');
            }, 2000);
          }
        });
      }
    } );
""")
        write(u'''  });
  </script>
</head>
<body>
  <center>
  <p>Number of images for this class: ''')
        _v = len(VFFSL(SL,"query_image_list",True))
        if _v is not None: write(_filter(_v))
        write(u'''</p>
  <p>
''')
        for label_set in VFFSL(SL,"query_label_sets",True): # generated from line 37, col 3
            write(u'''    <code>''')
            _v = VFFSL(SL,"label_set",True) # u'${label_set}' on line 38, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'${label_set}')) # from line 38, col 11.
            write(u'''</code>: ''')
            _v = len(filter(lambda x: x[2] == label_set, VFFSL(SL,"query_image_list",True)))
            if _v is not None: write(_filter(_v))
            write(u'''<br>
''')
        write(u'''  </p>
  <hr>
''')
        for index, (image_name, region_filename, label_folder, change_value) in enumerate(VFFSL(SL,"regions_metadata",True)): # generated from line 42, col 3
            write(u'''  <p>
    #''')
            _v = VFFSL(SL,"index",True)+1
            if _v is not None: write(_filter(_v))
            write(u''': <code>''')
            _v = VFFSL(SL,"label_folder",True) # u'$label_folder' on line 44, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$label_folder')) # from line 44, col 30.
            write(u'''/''')
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 44, col 44
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 44, col 44.
            write(u'''</code><br>
    <image src="/''')
            _v = VFFSL(SL,"region_filename",True) # u'${region_filename}' on line 45, col 18
            if _v is not None: write(_filter(_v, rawExpr=u'${region_filename}')) # from line 45, col 18.
            write(u'''"><br>
    <input class="tags" id="tags_''')
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 46, col 34
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 46, col 34.
            write(u'''" value="''')
            _v = VFFSL(SL,"change_value",True) # u'${change_value}' on line 46, col 56
            if _v is not None: write(_filter(_v, rawExpr=u'${change_value}')) # from line 46, col 56.
            write(u'''">
    <span id="submit_''')
            _v = VFFSL(SL,"image_name",True) # u'${image_name}' on line 47, col 22
            if _v is not None: write(_filter(_v, rawExpr=u'${image_name}')) # from line 47, col 22.
            write(u'''"></span>
  </p>
  <hr>
''')
        write(u'''  </center>
</body>
</html>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_results_template= 'respond'

## END CLASS DEFINITION

if not hasattr(results_template, '_initCheetahAttributes'):
    templateAPIClass = getattr(results_template, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(results_template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=results_template()).run()


